import {Circle, circles} from "../Shapes/Circle";
import {Arrow, arrows} from "../Shapes/Arrow";
import {SelfArrow} from "../Shapes/SelfArrow";
import {EntryArrow,startState, setStartState} from "../Shapes/EntryArrow";
import { Point } from "../exporting/ExportAsSVG";

export class ImportAsSVG {
    circles: Circle[];
    arrows: (Arrow | SelfArrow | EntryArrow) [];
    _svgData: string;
    draw: () => void;

    constructor(circArr: Circle[], arrowsArray: (Arrow | SelfArrow | EntryArrow)[], data: string, drawFunc:() => void) {
        this.circles = circArr;
        this.arrows = arrowsArray;
        this._svgData = data;
        this.draw = drawFunc;
    }

    clear(){
        this._svgData = '';
    }

    convert(): void{
        const ellipseRegex = /<ellipse[^>]*\scx="([\d.]+)"\s+cy="([\d.]+)"/g;
        let data_lines = this._svgData.split('\n');
        let cleaned: string[] = [];
        for (let i = 0; i < data_lines.length; i++) {
            const s = data_lines[i].replace(/\s+/g, " ").trim();
            if (s) cleaned.push(s);
        }
        let circle_data: Record<string, { x: number; y: number; count: number }> = {};
        let arrow_data: Record< string, {}> = {};
        // Remove the first 4 lines of the SVG import for a standard SVG import generated by our application
        cleaned.splice(0, 3);
        for (let line in cleaned){
            let data_line = cleaned[line];
            if (data_line.includes('ellipse')) {
                // console.log(data_line);
                let match;
                while ((match = ellipseRegex.exec(data_line)) !== null) {
                    const x = parseFloat(match[1]);
                    const y = parseFloat(match[2]);
                    const key = `${x},${y}`;
                    if (!circle_data[key]) {
                        circle_data[key] = { x, y, count: 0 };
                    }
                    circle_data[key].count++;
                }
            }
        }

        const circle_result = Object.values(circle_data);
        console.log(circle_result);
        for (let circle in circle_result) {
            let x = circle_result[circle].x;
            let y = circle_result[circle].y;
            let count = circle_result[circle].count;
            if (count > 1) {
                let insertCircle = new Circle(x, y);
                insertCircle.isAccept = true;
                circles.push(insertCircle);
            } else {
                circles.push(new Circle(x, y))
            }
        }
        this.draw();
    }

    normalizeText(text: string) {
        return text.replace(/^\s+|\s+$/g, "").replace(/\s+/g, " ");
    }
}